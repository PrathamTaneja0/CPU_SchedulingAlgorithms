PID,Arrival,Burst,Priority
# ========================================
# COMPREHENSIVE TEST CASES FOR CPU SCHEDULING ALGORITHMS
# ========================================

# Test Case 1: FCFS (First Come First Serve) - Non-Preemptive
# This test case demonstrates FCFS's fairness and arrival order handling
# Expected Execution: P1->P2->P3->P4 (strict arrival order)
# Expected Results: 
# - P1: CT=8, TAT=8, WT=0
# - P2: CT=12, TAT=11, WT=7  
# - P3: CT=21, TAT=19, WT=10
# - P4: CT=26, TAT=23, WT=18
# - Avg TAT: 15.25, Avg WT: 8.75
# Why good for FCFS: Shows arrival order fairness, simple to understand
1,0,8,1
2,1,4,1
3,2,9,1
4,3,5,1

# Test Case 2: SJF Preemptive (SRTF) - Preemptive
# This test case shows SJF's optimal performance with preemption
# Expected Execution: P1(0-1)->P2(1-3)->P1(3-8)->P3(8-17)
# Expected Results:
# - P1: CT=8, TAT=8, WT=0
# - P2: CT=3, TAT=2, WT=0
# - P3: CT=17, TAT=15, WT=6
# - Avg TAT: 8.33, Avg WT: 2.0
# Why good for SJF: Shows preemptive switching to shorter jobs, optimal waiting time
5,0,8,1
6,1,2,1
7,2,9,1

# Priority
# Test Case 3: Priority Scheduling with Different Arrival Times
# This test case demonstrates how Priority handles processes with different arrival times
# Process Data: P1(AT=0, BT=10, Priority=1), P2(AT=3, BT=11, Priority=7), P3(AT=5, BT=12, Priority=9)
# Higher priority numbers = higher priority (9>7>1)

# Step-by-Step Execution Analysis:
# Time 0-3: P1 runs (only process available, priority=1)
# Time 3: P2 arrives (priority=7 > P1's priority=1), P2 preempts P1
# Time 3-5: P2 runs (highest priority)
# Time 5: P3 arrives (priority=9 > P2's priority=7), P3 preempts P2  
# Time 5-17: P3 runs to completion (highest priority)
# Time 17-27: P2 continues (priority=7 > P1's priority=1)
# Time 27-37: P1 continues (lowest priority, runs last)

# Expected Execution: P1(0-3)->P2(3-5)->P3(5-17)->P2(17-28)->P1(28-38)
# Expected Results:
# - P1: CT=38, TAT=38, WT=28 (arrived at 0, completed at 38, waited 28)
# - P2: CT=28, TAT=25, WT=14 (arrived at 3, completed at 28, waited 14)
# - P3: CT=17, TAT=12, WT=0  (arrived at 5, completed at 17, waited 0)
# - Avg TAT: 25.0, Avg WT: 14.0

# Why this test case is excellent for Priority demonstration:
# 1. Shows preemptive behavior when higher priority processes arrive
# 2. Demonstrates priority-based execution regardless of arrival time
# 3. Shows how low priority processes can be delayed significantly
# 4. Illustrates the starvation problem (P1 waits 28 time units)
# 5. Perfect for showing Priority vs FCFS difference

# Performance Comparison with Other Algorithms on Same Data:
# FCFS:     Avg TAT=25.0,  Avg WT=14.0 (same as Priority due to arrival order)
# SJF:      Avg TAT=22.33, Avg WT=11.33 (better - prioritizes shorter jobs)
# Priority: Avg TAT=25.0,  Avg WT=14.0 (same as FCFS - arrival order dominates)
# RR(TQ=2): Avg TAT=~28.0, Avg WT=~17.0 (worse due to context switching)

# Key Learning Points for Class:
# 1. Priority scheduling can perform same as FCFS when arrival order aligns with priority
# 2. Preemption occurs only when higher priority process arrives
# 3. Low priority processes can experience significant delays
# 4. Priority scheduling is not always optimal for minimizing waiting time
# 5. The effectiveness depends heavily on priority assignment strategy
1,0,10,1
2,3,11,7
3,5,12,9

# Test Case 4: Priority Scheduling - Preemptive
# This test case demonstrates priority-based     execution
# Higher priority numbers = higher priority (3>2>1)
# Expected Execution: P3->P2->P1 (sorted by priority)
# Expected Results:
# - P1: CT=15, TAT=15, WT=7
# - P2: CT=8, TAT=8, WT=5
# - P3: CT=5, TAT=5, WT=0
# - Avg TAT: 9.33, Avg WT: 4.0
# Why good for Priority: Clear priority differences, shows priority-based execution
8,0,8,1
9,0,3,2
10,0,5,3

# Test Case 5: Round Robin - Preemptive with Time Quantum = 2
# This test case shows RR's fairness and time-sharing
# Expected Execution: P1(2)->P2(2)->P3(2)->P1(2)->P2(1)->P3(2)->P1(2)->P3(1)
# Expected Results (with TQ=2):
# - P1: CT=12, TAT=12, WT=4
# - P2: CT=7, TAT=7, WT=4
# - P3: CT=9, TAT=9, WT=4
# - Avg TAT: 9.33, Avg WT: 4.0
# Why good for RR: Shows equal time sharing, no starvation
11,0,6,1
12,0,5,1
13,0,5,1

# Test Case 6: FCFS Limitation - Convoy Effect
# This test case shows FCFS's weakness with long processes
# Short job arrives late, gets processed last (convoy effect)
# Expected Execution: P1->P2->P3->P4 (arrival order)
# Expected Results:
# - P1: CT=10, TAT=10, WT=0
# - P2: CT=12, TAT=11, WT=9
# - P3: CT=20, TAT=18, WT=10
# - P4: CT=21, TAT=18, WT=17
# - Avg TAT: 14.25, Avg WT: 9.0
# Why shows FCFS limitation: High waiting time for short processes
14,0,10,1
15,1,2,1
16,2,8,1
17,3,1,1

# Test Case 7: SJF Preemptive - Optimal Case
# This test case shows SJF's optimal performance
# Short jobs arrive during execution of long jobs
# Expected Execution: P1(0-2)->P2(2-4)->P3(4-6)->P1(6-10)
# Expected Results:
# - P1: CT=10, TAT=10, WT=2
# - P2: CT=4, TAT=3, WT=1
# - P3: CT=6, TAT=4, WT=2
# - Avg TAT: 5.67, Avg WT: 1.67
# Why optimal for SJF: Shows preemptive switching to minimize waiting time
18,0,8,1
19,2,2,1
20,4,2,1

# Test Case 8: Priority Starvation Example
# This test case demonstrates priority scheduling's starvation problem
# Low priority process may never get CPU if high priority processes keep arriving
# Expected Execution: P2->P3->P2->P3->P2->P3 (repeating high priority)
# Expected Results:
# - P1: CT=9, TAT=9, WT=6
# - P2: CT=6, TAT=6, WT=3
# - P3: CT=9, TAT=9, WT=6
# - Avg TAT: 8.0, Avg WT: 5.0
# Why shows Priority limitation: Demonstrates starvation potential
21,0,3,1
22,0,3,3
23,0,3,2

# Test Case 9: Round Robin - Time Quantum Impact
# This test case shows how time quantum size affects performance
# Smaller quantum = more context switching, larger quantum = less fair
# Expected Results with TQ=1: More frequent switching
# Expected Results with TQ=5: Less frequent switching
# Why shows RR characteristics: Demonstrates quantum size impact
24,0,10,1
25,0,5,1
26,0,8,1

# ========================================
# ALGORITHM COMPARISON SUMMARY
# ========================================

# FCFS (First Come First Serve):
# - Type: Non-preemptive
# - Selection: Arrival time (first come, first served)
# - Advantages: Simple, fair, no starvation
# - Disadvantages: Poor performance, convoy effect
# - Best for: Batch processing, simple systems
# - Worst for: Interactive systems, mixed job lengths

# SJF Preemptive (SRTF):
# - Type: Preemptive  
# - Selection: Shortest remaining burst time
# - Advantages: Optimal average waiting time, optimal average turnaround time
# - Disadvantages: Starvation, requires burst time knowledge
# - Best for: Batch systems, minimizing waiting time
# - Worst for: Real-time systems, unknown burst times

# Priority Scheduling:
# - Type: Preemptive
# - Selection: Highest priority number first
# - Advantages: Priority-based execution, good for real-time
# - Disadvantages: Starvation, priority inversion
# - Best for: Real-time systems, critical tasks
# - Worst for: General purpose, unknown priorities

# Round Robin:
# - Type: Preemptive
# - Selection: Time quantum based
# - Advantages: Fair, no starvation, predictable
# - Disadvantages: Context switching overhead, quantum dependency
# - Best for: Time-sharing systems, interactive processes
# - Worst for: Batch processing, very short/long jobs

# ========================================
# PERFORMANCE METRICS COMPARISON
# ========================================

# Test Case 1 Results Comparison:
# FCFS:    Avg TAT=15.25, Avg WT=8.75
# SJF:     Avg TAT=8.33,  Avg WT=2.0
# Priority: Avg TAT=9.33,  Avg WT=4.0  
# RR(TQ=2): Avg TAT=9.33,  Avg WT=4.0

# Test Case 5 Results Comparison (Convoy Effect):
# FCFS:    Avg TAT=14.25, Avg WT=9.0
# SJF:     Avg TAT=7.0,   Avg WT=1.75
# Priority: Avg TAT=14.25, Avg WT=9.0
# RR(TQ=2): Avg TAT=11.0,  Avg WT=6.5

# Key Observations:
# 1. SJF consistently provides lowest average waiting time
# 2. FCFS shows highest waiting time in mixed scenarios
# 3. Priority performs well when priorities align with job characteristics
# 4. RR provides balanced performance with fairness guarantee
# 5. Time quantum choice significantly affects RR performance

